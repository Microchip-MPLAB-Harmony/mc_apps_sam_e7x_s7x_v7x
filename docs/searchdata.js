var SearchFiles = ["GUID-8D70E7F2-08DD-4C89-A11C-F7A88992AF31.html",
							"GUID-B5E1FDD3-60B1-4565-B4B3-3A37F87C147F.html",
							"GUID-D8865022-2C56-423C-BCC6-BE64B47D2069.html",
							"GUID-B00E5044-3D1D-426F-8AAB-98D7E7FA5D20.html",
							"GUID-90349523-8CC8-4F9E-8C96-F8F98803B663.html",
							"GUID-8A33EBCA-4DAF-4A2C-8002-22E22377F72A.html",
							"GUID-E85C1437-2BD1-4479-8771-DF04C24476EB.html",
							"GUID-B97ED50C-A108-4ADA-835C-2D9FF534F6B2.html",
							"GUID-B5C933E4-822A-4D94-B039-3A06AA9CFA22.html",
							"GUID-4C42A762-0DB4-4F07-A916-8D950889B89A.html",
							"GUID-08B08E4E-BC65-4CAF-9730-FB068BEDE8B8.html",
							"GUID-08B08E4E-BC65-4CAF-9730-FB068BEDE8B8.html"];

var SearchTitles = ["Microchip MPLAB® Harmony 3 Motor Control Application Examples for SAM E7x/S7x/V7x family",
"Motor Control Applications",
"PMSM FOC using Quadrature Encoder",
"Power Factor Correction with PMSM FOC using PLL Estimator",
"PMSM FOC using PLL Estimator",
"PMSM FOC using Sliding Mode Observer",
"Hardware Setup",
"MCHV3 Development Board - Setup and Running 'PMSM FOC Quadrature Encoder Application'",
"MCHV3 Development Board - Setup and Running 'PMSM FOC PLL Estimator Application'",
"MCLV2 Development Board - Setup and Running 'PMSM FOC Quadrature Encoder Application'",
"MCLV2 Development Board - Setup and Running 'PMSM FOC PLL Estimator Application'",
"Setting up the hardware"];

var SearchInfo = [" Microchip MPLAB® Harmony 3 Motor Control Application Examples for SAM E7x/S7x/V7x family MPLAB Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC32 microcontroller and microprocessor devices This repository contains the MPLAB® Harmony 3 Motor Control application exmaples for SAME7x/S7x/V7x family Users can use these examples as a reference for developing their own motor control applications ",
							" Motor Control Applications Configurable Motor Control Examples (MCC with Motor Control Plant) The following applications are provided to demonstrate the Motor Control Plant to generate the motor control firmware Name Description Control Board Inverter Board PMSM FOC using PLL Estimator Sensorless Field Oriented Control of PMSM using PLL Estimator ATSAME70 Motor Control Plugin Module dsPICDEM™ MCLV-2 Support  dsPICDEM™ MCHV-3 Support PMSM FOC using Quadrature Encoder Sensored Field Oriented Control of PMSM using Quadrature Encoder ATSAME70 Motor Control Plugin Module dsPICDEM™ MCLV-2 Support  dsPICDEM™ MCHV-3 Support Static Motor Control Examples These applications contain static algorithm code and peripherals are configured using MHC Configurations can be changed in userparam h file Name Description Control Board Inverter Board PMSM FOC using PLL Estimator Sensorless Field Oriented Control of PMSM using PLL Estimator ATSAME70 Motor Control Plugin Module dsPICDEM™ MCLV-2 Support  dsPICDEM™ MCHV-3 Support PMSM FOC using Quadrature Encoder Sensored Field Oriented Control of PMSM using Quadrature Encoder ATSAME70 Motor Control Plugin Module dsPICDEM™ MCLV-2 Support  dsPICDEM™ MCHV-3 Support PFC and PMSM FOC using PLL Estimator Power Factor Correction and Sensorless Field Oriented Control of PMSM using PLL Estimator ATSAME70 Motor Control Plugin Module dsPICDEM™ MCHV-3 Support PMSM FOC using Sliding Mode Observer Sensorless Field Oriented Control of PMSM using Sliding Mode Observer ATSAME70 Motor Control Plugin Module dsPICDEM™ MCLV-2 Support ",
							" PMSM FOC using Quadrature Encoder This example application shows how to control the Permanent Magnet Synchronous Motor (PMSM) with Quadrature Encoder based Field Oriented Control (FOC) on a SAME70 Micro-controller Description Permanent Magnet Synchronous Motor (PMSM) is controlled using Field Oriented Control (FOC) Rotor position and speed is determined using quadrature encoder sensor Motor start/stop operation is controlled by the switch and motor speed can be changed by the on-board potentiometer Waveforms and variables can be monitored runtime using X2CScope Key features enabled in this project are: Dual shunt current measurement Speed control loop Field weakening MHC Project Configurations MHC Project Graph PMSM_FOC : This component configures FOC algorithm parameters motor parameters and motor control board parameters It connects to underlying peripheral libraries AFEC and PWM This components auto configures ADC channels and PWM channels as per PMSM_FOC component configurations AFEC Peripheral : The AFEC is used to measure analog quantities Four channels are used to measure the Phase Current U the Phase Current V the DC Bus Voltage and the Potentiometer Conversion is triggered at the PWM (zero match + offset of the switch delay) PWM Peripheral : This peripheral is used to generated three phase synchronous PWM waveforms Fault functionality is also enabled to switch off the output waveforms asynchronously TC QDEC Peripheral : TC peripheral is configured in QDEC mode It is used to decode the rotor position and speed from quadrature encoder signals X2CScope : This component adds X2C scope protocol code This uses UART to communicate to the host PC X2CScope allows user to monitor variables runtime UART Peripheral : The UART is used for X2CScope communication to observe graphs and variable values in run time Project Details For details refer Motor Control Plant Development Kits MCLV2 with ATSAME70 PIM  Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  Path of the application within the repository is apps/mcp_pmsm_foc_encoder_sam_e70  To build the application refer to the following table and open the project using its IDE Project Name Description Hardware Setup Guide mclv2_sam_e70_pim X MPLABX project for MCLV2 board with ATSAME70 PIM Hardware Setup and Running The Application on MCLV2 with ATSAME70 PIM MCHV3 with ATSAME70 PIM  Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  Path of the application within the repository is apps/mcp_pmsm_foc_encoder_sam_e70  To build the application refer to the following table and open the project using its IDE Project Name Description Hardware Setup Guide mchv3_sam_e70_pim X MPLABX project for MCHV3 board with ATSAME70 PIM Hardware Setup and Running The Application on MCHV3 with ATSAME70 PIM ",
							" Power Factor Correction with PMSM FOC using PLL Estimator This example application shows how to control the Permanent Magnet Synchronous Motor (PMSM) with PLL Estimator based Field Oriented Control (FOC) along with Power Factor Correction (PFC)on a SAME70 Micro-controller Description Power Factor Correction ( PFC ) shapes the input current drawn from the AC mains to be in synchronization with the input AC voltage This project uses Boost-Converter topology to carry out the Power Factor Correction Permanent Magnet Synchronous Motor (PMSM) is controlled using Field Oriented Control (FOC) Rotor position and speed is determined using PLL estimator technique Motor start/stop operation is controlled by the switch and motor speed can be changed by the on-board potentiometer Waveforms and variables can be monitored runtime using X2CScope Key features enabled in this project are: Power factor correction Dual shunt current measurement Speed control loop Field weakening MHC Project Configurations MHC Project Graph AFEC Peripheral : The AFEC0 peripheral is used to measure analog quantities for motor control operation Four channels are used to measure the Phase Current A the Phase Current B the DC Bus Voltage and the Potentiometer Conversion is triggered at the PWM (zero match + offset of the switch delay) The AFEC1 peripheral is used to measure analog quantities for power factor correction Three channels are used to measure the input rectified voltage input rectified current and the output DC link inverter voltage Conversion is triggered at the PWM period match PWM Peripheral : The PWM0 peripheral is used to generated three phase synchronous PWM waveforms Fault functionality is also enabled to switch off the output waveforms asynchronously The PWM1 peripheral is used to generate the PWM waveform for the boost converter switch for current waveform shaping UART Peripheral : The UART is used for X2CScope communication to observe graphs and variable values in run time Control Algorithm The Power Factor Correction is a technique of increasing the power factor of the input AC power supply thereby providing following advantages: Low line harmonics Reduced input current Reduced kVA requirement Improved line efficiency and improved electromagnetic compatibility The Power Factor Correction techniques can be classified as - Passive and Active The Passive Power Factor Correction uses passive components while the active Power Factor Correction Technique uses power electronic switches to carry out Power Factor Correction Following figure shows the various Power Factor Correction techniques classification: pfc classification This project uses Boost topology for Power Factor Correction A boost converter is placed between the rectifier and output inverter stage to synchronize input AC current to the input AC voltage For details refer to application note AN1106 The block diagram of a typical boost converter topology based Power Factor Correction is shown below Block Diagram: pfc_block_diagram The power factor correction is implemented in following steps: Measure the rectifier stage rectified AC voltage and rectified AC current and output inverter stage DC bus voltage via high speed ADC channels Regulate the DC bus voltage using the Voltage Error Compensator Determine the reference input for Current Error Compensator based on the output of Voltage Error Compensator and Voltage Feed-Forward Compensator Track the rectified reference AC current using a Current Error Compensator Current Error Compensator: The inner loop in the control block forms the current loop The input to the current loop is the reference current signal IACREF and the actual inductor current IAC The current error compensator is designed to produce a control output such that the inductor current IAC follows the reference current IACREF The current loop should run at a much faster rate when compared to the voltage loop The bandwidth of the current compensator should be higher for correctly tracking the semi-sinusoidal waveform at twice the input frequency The current controller GI produces a duty cycle value after appropriate scaling to drive the gate of the boost converter MOSFET Voltage Error Compensator: The outer loop in the control block forms the voltage loop The input to the voltage loop is the reference DC voltage VDCREF and the actual sensed output DC voltage VDC The voltage error compensator is designed to produce a control output such that the DC bus voltage VDC remains constant at the reference value VDCREF regardless of variations in the load current IO and the supply voltage VAC The voltage controller GV produces a control signal which determines the reference current IACREF for the inner current loop The output voltage is controlled by the voltage error compensator When the input voltage increases the product of VAC and VPI increases and thereby increasing the programming signal When this signal is divided by the square of the average voltage signal it results in the current reference signal being reduced proportionally The outcome is that the current is reduced proportionally to the increase in voltage thereby keeping the input power constant This ensures that the reference control output IACREF from the voltage compensator is maximum such that the rated output power is delivered at minimum input voltage Voltage Feed-Forward Compensator: If the voltage decreases the product (VAC · VPI) which determines IACREF also proportionally decreases However to maintain a constant output power at reduced input voltage the term IACREF should proportionally increase The purpose of having an input voltage feed-forward is to maintain the output power constant as determined by the load regardless of variations in the input line voltage This compensator implemented digitally by calculating the average value of the input line voltage squaring this average value and using the result as a divider for the input reference current which is fed to the current error compensator FOC with PLL estimator : This estimator uses PLL structure to estimate the rotor position and thus speed Its operating principle is based on the fact that the d-component of the Back Electromotive Force (BEMF) must be equal to zero at a steady state functioning mode It can not estimate the rotor angle at lower rotor speeds because of very low back EMF So open loop startup is used till required minimum speed is achieved The following block diagram shows the software realization of the FOC algorithm block_diagram PFC Software Design The following section describes the software flow diagram for the power factor correction application project The power factor correction algorithm in this example project is realized by following state machines state machine PFC Init State: In this state following tasks are performed: Initialization and configuration of NVIC AFEC PWM peripherals for generation of periodic ADC triggers and ADC conversion interrupt Calibration of input rectified AC current sense amplifiers Initialization of reference DC voltage and reference rectified AC current PI controllers used for Power Factor Correction PFC Start state: In this state following tasks are performed: Start PWM peripherals timer to trigger ADC conversion interrupt PFC Running State: In this state the power factor correction ISR is executed run state machine PFC Stop State: In this state the power factor correction is disabled Software Configuration: The following section describes user specific parameters used the the project Setting the PFC boost converter stage frequency: The boost converter stage PWM frequency ( in Hz ) can be configured by setting the following macro in userparams h file This period timer ticks should be configured properly for PWM peripheral in the MHC to get the desired frequency as shown below: freq setting Macro Description PFC_PWM_FREQUENCY Boost converter stage PWM frequency Setting PI Controller parameters of Boost Converter Controller: The voltage and current controllers used in the PFC algorithm has to be tuned to get the optimal control Parameters for reference DC bus voltage PI Controller: Macro Description PFC_VOLTAGE_PTERM Proportional gain of voltage control loop PFC_VOLTAGE_ITERM Integral gain of voltage control loop PFC_VOLTAGE_CTERM Anti-windup term of voltage control loop PFC_VOLTAGE_OUTMAX Maximum controller output of voltage control loop Parameters for reference rectified AC current PI Controller: Macro Description PFC_CURRCNTR_PTERM Proportional gain of input current control loop PFC_CURRCNTR_ITERM Integral gain of input current control loop PFC_CURRCNTR_CTERM Anti-windup term of input current control loop PFC_CURRCNTR_OUTMAX Maximum controller output of input current control loop Development Kits MCHV3 with ATSAME70 PIM Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  Path of the application within the repository is apps/pmsm_pfc_foc_pll_estimator_sam_e70  To build the application refer to the following table and open the project using its IDE Project Name Description Hardware Setup Guide mchv3_sam_e70_pim X MPLABX project for MCHV3 board with ATSAME70 PIM Hardware Setup and Running The Application on MCHV3 with ATSAME70 PIM ",
							" PMSM FOC using PLL Estimator This example application shows how to control the Permanent Magnet Synchronous Motor (PMSM) with PLL Estimator based Field Oriented Control (FOC) on a SAME70 Micro-controller Description Permanent Magnet Synchronous Motor (PMSM) is controlled using Field Oriented Control (FOC) Rotor position and speed is determined using PLL estimator technique Motor start/stop operation is controlled by the switch and motor speed can be changed by the on-board potentiometer Waveforms and variables can be monitored runtime using X2CScope Key features enabled in this project are: Dual shunt current measurement Speed control loop Field weakening MHC Project Configurations MHC Project Graph AFEC Peripheral : The AFEC is used to measure analog quantities Four channels are used to measure the Phase Current U the Phase Current V the DC Bus Voltage and the Potentiometer Conversion is triggered at the PWM (zero match + offset of the switch delay) PWM Peripheral : This peripheral is used to generated three phase synchronous PWM waveforms Fault functionality is also enabled to switch off the output waveforms asynchronously X2CScope : This component adds X2C scope protocol code This uses UART to communicate to the host PC X2CScope allows user to monitor variables runtime UART Peripheral : The UART is used for X2CScope communication to observe graphs and variable values in run time Project Details For details refer Motor Control Plant Development Kits MCLV2 with ATSAME70 PIM Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  Path of the application within the repository is apps/mcp_pmsm_foc_pll_estimator_sam_e70  To build the application refer to the following table and open the project using its IDE Project Name Description Hardware Setup Guide mclv2_sam_e70_pim X MPLABX project for MCLV2 board with ATSAME70 PIM Hardware Setup and Running The Application on MCLV2 with ATSAME70 PIM MCHV3 with ATSAME70 PIM Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  Path of the application within the repository is apps/mcp_pmsm_foc_pll_estimator_sam_e70  To build the application refer to the following table and open the project using its IDE Project Name Description Hardware Setup Guide mchv3_sam_e70_pim X MPLABX project for MCHV3 board with ATSAME70 PIM Hardware Setup and Running The Application on MCHV3 with ATSAME70 PIM ",
							" PMSM FOC using Sliding Mode Observer This example application shows how to control the Permanent Magnet Synchronous Motor (PMSM) with Sliding Mode Observer based Field Oriented Control (FOC) on a SAME70 Micro-controller Description Permanent Magnet Synchronous Motor (PMSM) is controlled using Field Oriented Control (FOC) Rotor position and speed is determined using Sliding Mode Observer (SMO) technique Motor start/stop operation is controlled by the switch and motor speed can be changed by the on-board potentiometer Waveforms and variables can be monitored runtime using X2CScope Key features enabled in this project are: Dual shunt current measurement Speed control loop MHC Project Configurations MHC Project Graph AFEC Peripheral : The AFEC (ADC) is used to measure analog quantities Four channels are used to measure the Phase Current A the Phase Current B the DC Bus Voltage and the Potentiometer Conversion is triggered at the PWM (zero match + offset of the switch delay) PWM Peripheral : This peripheral is used to generated three phase synchronous PWM waveforms Fault functionality is also enabled to switch off the output waveforms asynchronously UART Peripheral : The UART is used for X2CScope communication to observe graphs and variable values in run time Control Algorithm This section briefly explains the FOC control algorithm software design and implementation Field Oriented Control is the technique used to achieve the decoupled control of torque and flux This is done by transforming the stator current quantities (phase currents) from stationary reference frame to torque and flux producing currents components in rotating reference frame using mathematical transformations The Field Oriented Control is done as follows: Measure the motor phase currents Transform them into the two phase system (a b) using the Clarke transformation Calculate the rotor position angle Transform stator currents into the d q-coordinate system using the Park transformation The stator current torque (iq) and flux (id) producing components are controlled separately by the controllers The output stator voltage space vector is transformed back from the d q-coordinate system into the two phase system fixed with the stator by the Inverse Park transformation Using the space vector modulation the three-phase output voltage is generated Sliding Mode Observer (SMO) : Sliding Mode Observer is used to estimate the rotor position and thus speed The electrical rotor position and speed is calculated using the Sliding Mode Observer The main disadvantage of SMO Observer is its inability to estimate the rotor angle at lower rotor speeds because of very low value of back EMF Therefore the FOC algorithm also integrates the ramp-up profile for motor start The reference speed is incremented linearly using a open loop phase voltage control until the required minimum reference speed for the SMO observer is reached The Sliding Mode Observer ( SMO ) is based on the principle of sliding mode control It generates a sliding motion on the error between the plant output and the output of the observer such it produces a set of states that are precisely drives the estimated output to the actual output of the plant The sliding mode observer consists of a model based current observer followed by a back EMF Observer The observed back EMF is filtered and then used to extract the position information from it The following figure shows a typical Sliding Mode Observer: smo_block_diagram The current and back EMF observer is modeled in discrete time by following equations: Current Observer: current_observer Back EMF Observer: back_emf_observer smo_parameters The following block diagram shows the software realization of the FOC algorithm block_diagram Software Design The following figure shows the various state machines of the the motor control software state_diagram In the software the PMSM speed control task is realized by a state machine as shown in the previous figure The following sections briefly describes the various states in the PMSM speed control task: Initialize : In this state following tasks are performed: Initialization and configuration of NVIC AFEC PWM motor control peripherals for generation of periodic ADC triggers and ADC conversion interrupt Current Offset measurement and calibration Initialize PI controller parameters for speed and current control loops Start : In this state the motor control state variables are reset and periodic ADC conversion interrupt is enabled Control waits for the switch press Run : In this state the motor starts spinning The following flow chart and the timing diagram shows the tasks performed in run state: flow chart timing diagram In run state two threads are executed- Main task thread and ADC Interrupt task thread The current control and speed control is carried out in the ADC interrupt task thread The main task thread monitors the external switches and maintains the state machine Therefore the ADC interrupt cycle indicates the current and speed control frequency As pointed out earlier the SMO is unable to estimate the rotor position information at the start-up phase when the speed is very low This necessitates the motor control algorithm to integrate an open-loop control mechanism to linearly ramp the motor speed to the required minimum speed before switching over to closed loop control Therefore the motor control state can further be classified into three sub-states - Field Alignment Open-loop Control and Close-loop Control Field Alignment : In this mode a limited value of DC current is applied to the U phase of PMSM motor in order to align the rotor magnetic field with the U-phase of the motor The time for which DC current has to be applied to achieve the field alignment depends on the time constant of the PMSM motor drive Open Loop Control : In this mode the speed of the PMSM motor is gradually ramped up using an open loop control The speed is ramped up linearly to a minimum value required for the sensor-less SMO observer to estimate the speed of the PMSM motor with required accuracy Close Loop Control : In this mode the speed can be regulated using closed loop SMO based sensor-less FOC algorithm Stop : In this state the PWM channels are disabled thereby stopping the motor The periodic ADC trigger and conversion interrupt is disabled Software Configurations The PWM controller frequency ( in Hz ) can be configured by setting the following macro in userparams h file This frequency should be same as the frequency configured in the PWM peripheral in the MHC Macro Description PWM_FREQUENCY Current controller and PWM frequency in Hz Setting motor specific -parameter: Set the motor following motor parameters in userparams h file Macro Description Unit MOTOR_PER_PHASE_RESISTANCE Motor per phase resistance ohm MOTOR_PER_PHASE_INDUCTANCE Motor per phase inductance H MOTOR_BACK_EMF_CONSTANT_Vpeak_Line_Line_KRPM_MECH Back EMF constant Vpk(L-L)/KRPM NOPOLESPAIRS Number of pole pairs  NOMINAL_SPEED_RPM Rated mechanical speed of the motor RPM Setting PI Controller parameters: Depending on the type of motor used and the corresponding application PI controller parameters should to be updated in userparams h file Parameters for speed Control loop: Macro Description SPEEDCNTR_PTERM Proportional gain of speed control loop SPEEDCNTR_ITERM Integral gain of speed control loop SPEEDCNTR_CTERM Anti-windup term of speed control loop SPEEDCNTR_OUTMAX Maximum controller output of speed control loop Parameters for Id current loop: Macro Description D_CURRCNTR_PTERM Proportional gain of Id current control loop D_CURRCNTR_ITERM Integral gain of Id current control loop D_CURRCNTR_CTERM Anti-windup term of Id current control loop D_CURRCNTR_OUTMAX Maximum controller output of Id current control loop Parameters for Iq current loop: Macro Description Q_CURRCNTR_PTERM Proportional gain of Iq current control loop Q_CURRCNTR_ITERM Integral gain of Iq current control loop Q_CURRCNTR_CTERM Anti-windup term of Iq current control loop Q_CURRCNTR_OUTMAX Maximum controller output of Iq current control loop Debugging Features: Open loop functioning is useful for debugging when using new motor This feature can be enabled by setting the following macros in userparams h file Parameters for Iq current loop: Macro Description OPEN_LOOP_FUNCTIONING Open loop enable switch (0 - Disable 1 - Enable ) Q_CURRENT_REF_OPENLOOP Startup current in open loop Development Kits MCLV2 with ATSAME70 PIM Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  Path of the application within the repository is apps/pmsm_foc_smo_sam_e70  To build the application refer to the following table and open the project using its IDE Project Name Description Hardware Setup Guide mclv2_sam_e70_pim X MPLABX project for MCLV2 board with ATSAME70 PIM Hardware Setup and Running The Application on MCLV2 with ATSAME70 PIM ",
							" Hardware Setup ",
							" MCHV3 Development Board - Setup and Running 'PMSM FOC Quadrature Encoder Application' Setting up the hardware The following table shows the target hardware for the application projects Project Name Hardware mchv3_sam_e70_pim X MCHV3 Development Board ATSAME70 Plug-in module Leadshine EL5-M0400-1-24 Motor  Isolated Embedded Debugger Interface Setting up MCHV3 Development Board Mount the ATSAME70 Motor Control Plug In Module on U9 header PIM Install Place the \"PFC - External Opamp Configuration\" Matrix board at J4 External OPAMP Motor Connections: Phase U - M1 Phase V - M2 Phase W - M3 Motor Connections Encoder Connections: A+ - HA B+ - HB 5V - +5V 0V - GND Encoder Connections Jumper Settings: J11 - VAC ( Short Pin 3 - 4) J12 - IA ( Short Pin 1 - 2) J13 - IB ( Short Pin 1 - 2) J14 - Fault_IP/IBUS ( Short Pin 1 - 2) Power the board with (110V/220V) AC mains For additional safety it is recommended to use a current limited power supply while testing this software demonstration on a non-default hardware and motor jumper Settings Installing Isolated Embedded Debugger Default programmer or debugger daughter card shipped with the MCHV3 board cannot program or debug SAM series MCU and therefore it needs to be replaced with an Isolated Embedded Debugger Interface for MCHV Isolated EDBG Complete Setup Setup Running the Application Build and Program the application using its IDE Press switch PUSHBUTTON to start the motor Vary potentiometer to change the speed of the motor Press switch to stop the motor Monitor graphs on X2C Scope Refer to the following tables for switch and LED details: Switch Description PUSHBUTTON To start or stop the motor LED D2 Status Description OFF No fault ON Fault is detected ",
							" MCHV3 Development Board - Setup and Running 'PMSM FOC PLL Estimator Application' Setting up the hardware The following table shows the target hardware for the application projects Project Name Hardware mchv3_sam_e70_pim X MCHV3 Development Board ATSAME70 Plug-in module Leadshine EL5-M0400-1-24 Motor  Isolated Embedded Debugger Interface Setting up MCHV3 Development Board Mount the ATSAME70 Motor Control Plug In Module on U9 header PIM Install Place the \"PFC - External Opamp Configuration\" Matrix board at J4 External OPAMP Motor Connections: Phase U - M1 Phase V - M2 Phase W - M3 Motor Connections Jumper Settings: J11 - VAC ( Short Pin 3 - 4) J12 - IA ( Short Pin 1 - 2) J13 - IB ( Short Pin 1 - 2) J14 - Fault_IP/IBUS ( Short Pin 1 - 2) Power the board with (110V/220V) AC mains For additional safety it is recommended to use a current limited power supply while testing this software demonstration on a non-default hardware and motor jumper Settings Installing Isolated Embedded Debugger Default programmer or debugger daughter card shipped with the MCHV3 board cannot program or debug SAM series MCU and therefore it needs to be replaced with an Isolated Embedded Debugger Interface for MCHV Isolated EDBG Complete Setup Setup Running the Application Build and Program the application using its IDE Press switch PUSHBUTTON to start the motor Vary potentiometer to change the speed of the motor Press switch to stop the motor Monitor graphs on X2C Scope Refer to the following tables for switch and LED details: Switch Description PUSHBUTTON To start or stop the motor LED D2 Status Description OFF No fault ON Fault is detected ",
							" MCLV2 Development Board - Setup and Running 'PMSM FOC Quadrature Encoder Application' Setting up the hardware The following table shows the target hardware for the application projects Project Name Hardware mclv2_sam_e70_pim X MCLV2 Development Board ATSAME70 Plug-in module Hurst Motor with encoder Setting up MCLV2 Development Board Mount the ATSAME70 Motor Control Plug In Module on U9 header PIM Install Place the \"External Opamp Configuration\" Matrix board at J14 External OPAMP Motor Connections: White (Phase U) - M1 Black (Phase V) - M2 Red (Phase W) - M3 Motor Connections Encoder Connections: Connect encoder wires as shown below (Red) +5V : +5V (Black) -5V : GND (White) A : HA (Blue) B : HB Encoder Connections Jumper Settings: JP1 - Curr JP2 - Curr JP3 - Curr In order to use RS232 port for X2CScope Communication JP4 - UART JP5 - UART In order to use USB port for X2CScope Communication JP4 - USB JP5 - USB jumper Settings Power the board with a 24V DC supply using J2 or BP1-BP2 For additional safety it is recommended to use a current limited power supply while testing this software demonstration on a non-default hardware and motor jumper Settings Complete Setup Setup Running the Application Build and Program the application using its IDE Press switch S2 to start the motor Vary potentiometer to change the speed of the motor Press switch S2 to stop the motor Press switch S3 to change the direction of the motor Press switch S2 again to start the motor Monitor graphs on X2C Scope Refer to the following tables for switch and LED details: Switch Description Switch S2 To start or stop the motor Switch S3 To change the direction of rotation Direction toggle command is accepted only when motor is stationary LED D2 Status Description OFF Motor spin direction is \"positive\" ON Motor spin direction is \"negative\" LED D17 Status Description OFF No fault ON Fault is detected ",
							" MCLV2 Development Board - Setup and Running 'PMSM FOC PLL Estimator Application' ",
							" Setting up the hardware The following table shows the target hardware for the application projects Project Name Hardware mclv2_sam_e70_pim X MCLV2 Development Board ATSAME70 Plug-in module Hurst Motor with encoder Setting up MCLV2 Development Board Mount the ATSAME70 Motor Control Plug In Module on U9 header PIM_Install Place the \"External Opamp Configuration\" Matrix board at J14 External_OPAMP Motor Connections: White (Phase U) - M1 Black (Phase V) - M2 Red (Phase W) - M3 Motor_Connections Jumper Settings: JP1 - Curr JP2 - Curr JP3 - Curr In order to use RS232 port for X2CScope Communication JP4 - UART JP5 - UART In order to use USB port for X2CScope Communication JP4 - USB JP5 - USB jumper_Settings Power the board with a 24V DC supply using J2 or BP1-BP2 For additional safety it is recommended to use a current limited power supply while testing this software demonstration on a non-default hardware and motor power Complete Setup Setup Running the Application Build and Program the application using its IDE Press switch S2 to start the motor Vary potentiometer to change the speed of the motor Press switch S2 to stop the motor Press switch S3 to change the direction of the motor Press switch S2 again to start the motor Monitor graphs on X2C Scope Refer to the following tables for switch and LED details: Switch Description Switch S2 To start or stop the motor Switch S3 To change the direction of rotation Direction toggle command is accepted only when motor is stationary LED D2 Status Description OFF Motor spin direction is \"positive\" ON Motor spin direction is \"negative\" LED D17 Status Description OFF No fault ON Fault is detected "];

